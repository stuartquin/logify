// Generated by CoffeeScript 1.3.3
(function() {
  var Filters, LogLine, line_count, max_lines,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Filters = (function() {

    function Filters() {
      var field,
        _this = this;
      this.active_filter = "";
      this.json_enabled = true;
      this.sql_enabled = true;
      field = $("#filter_field");
      field.keypress(function(evt) {
        if (evt.charCode === 13) {
          return _this.active_filter = field.val();
        }
      });
      $("#clear_logs").click(function() {
        var line_count;
        $("#log_output").html("");
        return line_count = 0;
      });
      $("#sql_toggle").button("toggle");
      $("#json_toggle").button("toggle");
      $("#sql_toggle").click(function(e) {
        e.stopImmediatePropagation();
        $("#sql_toggle").toggleClass("active");
        return _this.sql_enabled = !_this.sql_enabled;
      });
      $("#json_toggle").click(function(e) {
        e.stopImmediatePropagation();
        $("#json_toggle").toggleClass("active");
        return _this.json_enabled = !_this.json_enabled;
      });
    }

    return Filters;

  })();

  LogLine = (function() {

    LogLine.label_map = {
      error: "important",
      debug: "info"
    };

    function LogLine(line, filters) {
      this.line = line;
      this.filters = filters;
      this.highlight_filter = __bind(this.highlight_filter, this);

      this.highlight_sql = __bind(this.highlight_sql, this);

      this.highlight_json = __bind(this.highlight_json, this);

      this.highlight_http_code = __bind(this.highlight_http_code, this);

      this.highlight_type = __bind(this.highlight_type, this);

      this.active_filter = this.filters.active_filter;
      this.format_json = this.filters.json_enabled;
      this.format_sql = this.filters.sql_enabled;
      this.line_class = "";
    }

    LogLine.prototype.highlight_type = function() {
      return this.line = this.line.replace(/(DEBUG|WARNING|INFO|ERROR)/i, function(match, group1) {
        var label;
        label = group1.toLowerCase();
        label = LogLine.label_map[label] || label;
        return "<strong class='label label-" + label + "'>" + match + "</strong>";
      });
    };

    LogLine.prototype.highlight_http_code = function() {
      return this.line = this.line.replace(/GET|POST|PUT|DELETE/, function(match) {
        return "<strong>" + match + "</strong>";
      });
    };

    LogLine.prototype.highlight_json = function() {
      return this.line = this.line.replace(/({(?:.*):(?:.*)})/gi, function(match) {
        var converted;
        try {
          converted = JSON.parse(match);
        } catch (error) {
          converted = match;
          console.log(error);
        }
        converted = JSON.stringify(converted, void 0, 2);
        return "<pre><code class='json'>" + converted + "</code></pre>";
      });
    };

    LogLine.prototype.highlight_sql = function() {
      this.line = this.line.replace(/(SELECT .+ FROM .+(WHERE)?)/gi, function(match) {
        return "<pre><code class='sql'>" + match + "</code></pre>";
      });
      this.line = this.line.replace(/\\n/gi, "<br />");
      return this.line = this.line.replace(/\\t/gi, "  ");
    };

    LogLine.prototype.highlight_filter = function() {
      if (this.active_filter === "") {
        return;
      }
      if (this.line.match(this.active_filter)) {
        this.line = this.line.replace(new RegExp(this.active_filter, "gi"), function(match) {
          return "<strong class='text-success'>" + match + "</strong>";
        });
        return this.line_class = "filtered";
      } else {
        return this.line_class = "muted";
      }
    };

    LogLine.prototype.render = function(index, callback) {
      var output;
      this.highlight_type();
      this.highlight_http_code();
      this.highlight_filter();
      if (this.format_json) {
        this.highlight_json();
      }
      if (this.format_sql) {
        this.highlight_sql();
      }
      if (line_count % 2 === 0) {
        this.line_class += " striped";
      }
      output = $("<div class='line " + this.line_class + "'>");
      output.html(this.line);
      return callback(output);
    };

    return LogLine;

  })();

  line_count = 0;

  max_lines = 1000;

  $(document).ready(function() {
    var filters, socket;
    socket = io.connect();
    filters = new Filters();
    return socket.on("log", function(data) {
      var logLine;
      logLine = new LogLine(data, filters);
      return logLine.render(line_count, function(formatted) {
        $("#log_output").prepend(formatted);
        formatted.find("pre code").each(function(i, e) {
          return hljs.highlightBlock(e);
        });
        line_count++;
        if (line_count > max_lines) {
          return $("#log_output div:last-child").remove();
        }
      });
    });
  });

}).call(this);
